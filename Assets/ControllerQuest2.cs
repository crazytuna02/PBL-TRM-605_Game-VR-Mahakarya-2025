//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.0
//     from Assets/ControllerQuest2.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ControllerQuest2: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ControllerQuest2()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ControllerQuest2"",
    ""maps"": [
        {
            ""name"": ""Quest2"",
            ""id"": ""3f025d28-9045-46ac-ab72-fcb93e20d8d4"",
            ""actions"": [
                {
                    ""name"": ""Next"",
                    ""type"": ""Button"",
                    ""id"": ""bc99fa0e-2490-4a55-b309-bf83ebaf4153"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ec62c050-ed17-4547-b111-38174ddc680f"",
                    ""path"": ""<OculusTouchController>{RightHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Next"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""78fab248-e27b-486a-a972-309648888574"",
                    ""path"": ""<OculusTouchController>{RightHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Next"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d65e785c-dfaa-43f6-9c6c-f9f4dfb6e604"",
                    ""path"": ""<OculusTouchController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Next"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Quest2
        m_Quest2 = asset.FindActionMap("Quest2", throwIfNotFound: true);
        m_Quest2_Next = m_Quest2.FindAction("Next", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Quest2
    private readonly InputActionMap m_Quest2;
    private List<IQuest2Actions> m_Quest2ActionsCallbackInterfaces = new List<IQuest2Actions>();
    private readonly InputAction m_Quest2_Next;
    public struct Quest2Actions
    {
        private @ControllerQuest2 m_Wrapper;
        public Quest2Actions(@ControllerQuest2 wrapper) { m_Wrapper = wrapper; }
        public InputAction @Next => m_Wrapper.m_Quest2_Next;
        public InputActionMap Get() { return m_Wrapper.m_Quest2; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Quest2Actions set) { return set.Get(); }
        public void AddCallbacks(IQuest2Actions instance)
        {
            if (instance == null || m_Wrapper.m_Quest2ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Quest2ActionsCallbackInterfaces.Add(instance);
            @Next.started += instance.OnNext;
            @Next.performed += instance.OnNext;
            @Next.canceled += instance.OnNext;
        }

        private void UnregisterCallbacks(IQuest2Actions instance)
        {
            @Next.started -= instance.OnNext;
            @Next.performed -= instance.OnNext;
            @Next.canceled -= instance.OnNext;
        }

        public void RemoveCallbacks(IQuest2Actions instance)
        {
            if (m_Wrapper.m_Quest2ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IQuest2Actions instance)
        {
            foreach (var item in m_Wrapper.m_Quest2ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Quest2ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Quest2Actions @Quest2 => new Quest2Actions(this);
    public interface IQuest2Actions
    {
        void OnNext(InputAction.CallbackContext context);
    }
}
